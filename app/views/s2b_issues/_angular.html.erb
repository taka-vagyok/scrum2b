<script>
  var scrum2b = angular.module('scrum2b', []);
  scrum2b.controller('BoardsCtrl', function ($scope, ListIssues){
    ListIssues.list().then(
      function(data){
        var arrayVersionLoaded = [];
        var arrayIssues = [];
        var arrayVersions = [];
        var arrayStatus = [];
        var arrayTracker = [];
        var arrayPriority = [];
        var arrayMembers = [];
        $scope.statusIds = data.status_ids
         angular.forEach(data.issues, function(value) {
           angular.forEach(value, function(value,key) {
             arrayIssues.push(value);
            })
         })
         angular.forEach(data.versions, function(value) {
           angular.forEach(value, function(value,key) {
             arrayVersions.push(value);
            })
         })
         angular.forEach(data.status, function(value) {
           angular.forEach(value, function(value,key) {
             arrayStatus.push(value);
            })
         })
         angular.forEach(data.tracker, function(value) {
           angular.forEach(value, function(value,key) {
             arrayTracker.push(value);
            })
         })
         angular.forEach(data.priority, function(value) {
           angular.forEach(value, function(value,key) {
             arrayPriority.push(value);
            })
         })
         angular.forEach(data.members, function(value) {
           angular.forEach(value, function(value,key) {
             arrayMembers.push(value);
            })
         })

        $scope.versions = arrayVersions;
        $scope.issues = arrayIssues;
        $scope.priorities = arrayPriority;
        $scope.trackers = arrayTracker;
        $scope.status = arrayStatus;
        $scope.allIssues = arrayIssues;
        $scope.members = arrayMembers;
        $scope.selected = arrayVersions[0]
        arrayVersionLoaded.push(arrayVersions[0].id)
        $scope.versionsLoaded = arrayVersionLoaded
        $scope.filterStatusIssues($scope.issues)
      }
    );
    
    var sortableEle;
          
    $scope.dragStart = function(e, ui) {
       
    }
    $scope.dragEnd = function(e, ui) {
      
    }
        
    sortableEle = $('.connectedSortable').sortable({
        start: $scope.dragStart,
        update: $scope.dragEnd
    });
    
    $scope.getIssues = function(version){
      console.log("array version loaded "+ $scope.versionsLoaded)
      var indexOfVersion  = $scope.versionsLoaded.indexOf(version.id)
      if (indexOfVersion >= 0){
        console.log("ko nhay vao aip ")
        var arrayIssues = [];
        angular.forEach($scope.allIssues, function(value) {
          if(value.fixed_version_id == version.id){
            arrayIssues.push(value);
          }
         })
        $scope.issues = arrayIssues;
        $scope.filterStatusIssues($scope.issues)
      }else{
        console.log("nhay vao aip ")
        $scope.versionsLoaded.push(version.id)
        ListIssues.getIssues(version.id).then(
          function(data){
            console.log("data tra ve " + data)
            var arrayIssues = [];
            angular.forEach(data, function(value) {
              angular.forEach(value, function(value,key) {
                angular.forEach(value, function(value,key) {
                  arrayIssues.push(value);
                  $scope.allIssues.push(value);
                })
              })
            })
            $scope.issues = arrayIssues;
            $scope.filterStatusIssues($scope.issues)
          }
        )
      }
      if($scope.selected == version){
        $scope.selected = !version;
      }else{
        $scope.selected = version;
      }
    }
    
    $scope.summitIssue = function(){
      // alert (issue.id)
      // if (issue.id === nil) {
      //   alert("vao them")
      // }else{
      //   alert("vao sua")
      // };
    };

    $scope.addIssue = function(){
      if($scope.issue.subject){
        ListIssues.addIssue($scope.issue).then(
          function(data){
            if(data.result == 'create_success'){
              $scope.issues.push(data.issue)
              $scope.allIssues.push(data.issue)
              console.log ("Array issues "+ $scope.issues)
            }
          }
        );
        $('.add_new_issue').hide();
      }else{
        $scope.errorAddNew = "Subject issue not blank!"
      }
    };

    $scope.deleteIssue = function(issue) {
      ListIssues.deleteIssue(issue).then(
         function(data){
          if (data.result == "success") {
            $scope.allIssues.splice($scope.allIssues.indexOf(issue), 1);
            $scope.issues.splice($scope.allIssues.indexOf(issue), 1);
            $scope.filterStatusIssues($scope.issues)
          };
         }
      );
    };

    $scope.editIssue = function() {
      console.log ("params " + $scope.issue.assigned_to_id)
      ListIssues.editIssue($scope.issue).then(
        function(data){
          if (data.result == "eidt_success") {
            //chay lai function load data
          }else{
            alert(data.result)
          }
        }
      );
    };
    
    $scope.isActiveVersion = function(version) {
      return $scope.selected === version;
    };
    
    $scope.filterStatusIssues = function(issues) {
      var arrayIssuesNew = [];
      var arrayIssuesInProgess = [];
      var arrayIssuesResolved = [];
      var arrayIssuesClose = [];
      var arrayIssuesBacklog = [];
      angular.forEach(issues, function(value) {
        if ($scope.statusIds.status_no_start == value.status_id){
          arrayIssuesNew.push(value)
        }else if($scope.statusIds.status_inprogress == value.status_id){
          arrayIssuesInProgess.push(value)
        }else if($scope.statusIds.status_completed == value.status_id ){
          arrayIssuesResolved.push(value)
        }else if($scope.statusIds.status_closed == value.status_id ){
          arrayIssuesClose.push(value)
        }else{
          arrayIssuesBacklog.push(value)
        }
      })
      $scope.issuesNew = arrayIssuesNew
      $scope.issuesInProgess = arrayIssuesInProgess
      $scope.issuesResolved = arrayIssuesResolved
      $scope.issuesClose = arrayIssuesClose
      $scope.issuesBacklog = arrayIssuesBacklog
    }
    
  });
  
  scrum2b.service('ListIssues', function($http, $q){
    function getIssues(version_id){
       var request = $http({
        method: "post",
        url: "get_issues_version",
        params: {
          action: "get"
        },
        data: {
          project_id: "<%= @project.id %>",
          version_id: version_id,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }
    
    function getData(callback){
        var request = $http({
        method: "post",
        url: "get_data",
        params: {
          action: "get"
        },
        data: {
          project_id: "<%= @project.id %>"
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }
    
    function addIssue(issue){
      var request = $http({
        method: "post",
        url: "create",
        params: {
          action: "get"
        },
        data: {
          issue: issue,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }
    
    function deleteIssue(issue){
      var request = $http({
        method: "post",
        url: "destroy",
        params: {
          id: issue.id
        },
        data: {
          issue: issue,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }

    function editIssue(issue){
      var request = $http({
        method: "post",
        url: "update",
        data: {
          issue: issue,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }

    return {
      list: getData,
      getIssues: getIssues,
      addIssue: addIssue,
      deleteIssue: deleteIssue,
      editIssue: editIssue,
    }
    
    function handleError ( response ){
      if (
          ! angular.isObject( response.data ) ||
          ! response.data.message
        ) {
        return ( $q.reject("false") );
      };

      return ( $q.reject( response.data.message ) );
    }

    function  handleSuccess( response ){
      return ( response.data );
    }
  });

</script>