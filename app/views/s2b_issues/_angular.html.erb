<script>
  var scrum2b = angular.module('scrum2b', []);

  scrum2b.controller('BoardsCtrl', function ($scope, ListIssues){

    ListIssues.list().then(
      function(data){
        var arrayVersionLoaded = [];
        var arrayIssues = [];
        var arrayIssuesBacklog = [];
        var arrayVersions = [];
        var arrayStatus = [];
        var arrayTracker = [];
        var arrayPriority = [];
        var arrayMembers = [];
        $scope.statusIds = data.status_ids
          angular.forEach(data.issues, function(value) {
            angular.forEach(value, function(value,key) {
              arrayIssues.push(value);
            })
          })
          angular.forEach(data.issues_backlog, function(value) {
            angular.forEach(value, function(value,key) {
              arrayIssuesBacklog.push(value);
            })
          })
          angular.forEach(data.versions, function(value) {
            angular.forEach(value, function(value,key) {
              arrayVersions.push(value);
            })
          })
          angular.forEach(data.status, function(value) {
            angular.forEach(value, function(value,key) {
              arrayStatus.push(value);
            })
          })
          angular.forEach(data.tracker, function(value) {
            angular.forEach(value, function(value,key) {
              arrayTracker.push(value);
            })
          })
          angular.forEach(data.priority, function(value) {
            angular.forEach(value, function(value,key) {
              arrayPriority.push(value);
            })
          })
          angular.forEach(data.members, function(value) {
            angular.forEach(value, function(value,key) {
              arrayMembers.push(value);
            })
          })

        $scope.versions = arrayVersions;
        $scope.issues = arrayIssues;
        $scope.issuesBacklog = arrayIssuesBacklog
        $scope.priorities = arrayPriority;
        $scope.trackers = arrayTracker;
        $scope.status = arrayStatus;
        $scope.allIssues = arrayIssues;
        $scope.members = arrayMembers;

        $scope.selected = arrayVersions[0]
        arrayVersionLoaded.push(arrayVersions[0].id)
        $scope.versionsLoaded = arrayVersionLoaded
        $scope.filterStatusIssues($scope.issues)
        
        console.log(arrayMembers)
        console.log("array new status " + data.status_ids.status_no_start)
      }
    );

    $scope.getIssues = function(version){
      console.log("array version loaded "+ $scope.versionsLoaded)
      var indexOfVersion  = $scope.versionsLoaded.indexOf(version.id)
      if (indexOfVersion >= 0){
        var arrayIssues = [];
        angular.forEach($scope.allIssues, function(value) {
          if(value.fixed_version_id == version.id){
            arrayIssues.push(value);
          }
         })
        $scope.issues = arrayIssues;
        $scope.filterStatusIssues($scope.issues)
      }else{
        $scope.versionsLoaded.push(version.id)
        ListIssues.getIssues(version.id).then(
          function(data){
            var arrayIssues = [];
            angular.forEach(data, function(value) {
              angular.forEach(value, function(value,key) {
                angular.forEach(value, function(value,key) {
                  arrayIssues.push(value);
                  $scope.allIssues.push(value);
                })
              })
            })
            $scope.issues = arrayIssues;
            $scope.filterStatusIssues($scope.issues)
          }
        )
      }
      if($scope.selected == version){
        $scope.selected = !version;
      }else{
        $scope.selected = version;
      }
    }
    
    $scope.summitIssue = function(){
      // alert (issue.id)
      // if (issue.id === nil) {
      //   alert("vao them")
      // }else{
      //   alert("vao sua")
      // };
    };

    $scope.addIssue = function(){
      if($scope.issue.subject){
        ListIssues.addIssue($scope.issue).then(
          function(data){
            if(data.result == 'create_success'){
              $scope.issues.push(data.issue)
              $scope.allIssues.push(data.issue)
            }
          }
        );
        $('.add_new_issue').hide();
      }else{
        $scope.errorAddNew = "Subject issue not blank!"
      }
    };

    $scope.deleteIssue = function(issue) {
      ListIssues.deleteIssue(issue).then(
         function(data){
          if (data.result == "success") {
            $scope.allIssues.splice($scope.allIssues.indexOf(issue), 1);
            $scope.issues.splice($scope.allIssues.indexOf(issue), 1);
            $scope.filterStatusIssues($scope.issues)
          };
         }
      );
    };

    $scope.editIssue = function(){
      console.log ("params edit issue " + $scope.issue)
      ListIssues.editIssue($scope.issue).then(
        function(data){
          if (data.result == "eidt_success") {
            //chay lai function load data
          }else{
            alert(data.result)
          }
        }
      );
    };
    
    $scope.isActiveVersion = function(version) {
      return $scope.selected === version;
    };
    
    $scope.filterStatusIssues = function(issues) {
      var arrayIssuesNew = [];
      var arrayIssuesInProgess = [];
      var arrayIssuesResolved = [];
      var arrayIssuesClose = [];
      angular.forEach(issues, function(value) {
        if ($scope.statusIds.status_no_start == value.status_id){
          arrayIssuesNew.push(value)
        }else if($scope.statusIds.status_inprogress == value.status_id){
          arrayIssuesInProgess.push(value)
        }else if($scope.statusIds.status_completed == value.status_id ){
          arrayIssuesResolved.push(value)
        }else if($scope.statusIds.status_closed == value.status_id ){
          arrayIssuesClose.push(value)
        }else{

        }
      })
      $scope.issuesNew = arrayIssuesNew
      $scope.issuesInProgess = arrayIssuesInProgess
      $scope.issuesResolved = arrayIssuesResolved
      $scope.issuesClose = arrayIssuesClose
    }
  });

  scrum2b.directive('sortable', function() {
    return {
      restrict: 'A',
      link: function(scope, elm, attrs) {
        var jqueryElm = $(elm[0]);
        $(jqueryElm).sortable({
          connectWith: ".connectedSortable"
        }).disableSelection()

        $(jqueryElm).on( "sortout", function( event, ui ) { 
          $('.content').find('.hide_backlog').find('.content_issue').show();
        });

        $(jqueryElm).on( "sortover", function( event, ui ) {
          $(this).addClass('background_sortover');
          $('.ui-sortable-helper').addClass('move_issue');
          a = $(this).attr('class');
          if ($('.location_start_issue').length == 0 ) {
            $("<div class='location_start_issue'></div>").insertAfter(".move_issue");
          };
          check_height_max_angular();
        });

        $(jqueryElm).on( "sortout", function( event, ui ) {
          $(this).removeClass("background_sortover");
        });

        $(jqueryElm).on( "sortstop", function( event, ui ) {
           $( ".location_start_issue" ).remove();
          check_height_max_angular();
        });
      
        $(jqueryElm).on( "sortbeforestop", function( event, ui ) {
          $('.move_issue').removeClass('move_issue');
        });

        function check_height_max_angular(){
          $(".sprint-active .check_height").css("height","auto");
          var height1 = $(".active #sortable1").height();
          var height2 = $(".active #sortable2").height();
          var height3 = $(".active #sortable3").height();
          var height4 = $(".active #sortable4").height();
          var array_height = [height1, height2, height3, height4];
          var max_height = Math.max.apply(Math, array_height);
          $(".sprint-active .check_height").css("height",max_height);
        }
      }
    };
  })

  scrum2b.directive('datepicker', function () {
    return {
        restrict: 'A',
        require: 'ngModel',
         link: function (scope, element, attrs, ngModelCtrl) {
            element.datepicker({
                dateFormat: 'yy-mm-dd',
                onSelect: function (date) {
                    scope.date = date;
                    scope.$apply();
                }
            });
        }
    };
  });
  
  scrum2b.service('ListIssues', function($http, $q){
    function getIssues(version_id){
       var request = $http({
        method: "post",
        url: "get_issues_version",
        params: {
          action: "get"
        },
        data: {
          project_id: "<%= @project.id %>",
          version_id: version_id,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }
    
    function getData(callback){
        var request = $http({
        method: "post",
        url: "get_data",
        params: {
          action: "get"
        },
        data: {
          project_id: "<%= @project.id %>"
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }
    
    function addIssue(issue){
      var request = $http({
        method: "post",
        url: "create",
        params: {
          action: "get"
        },
        data: {
          issue: issue,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }
    
    function deleteIssue(issue){
      var request = $http({
        method: "post",
        url: "destroy",
        params: {
          id: issue.id
        },
        data: {
          issue: issue,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }

    function editIssue(issue){
      var request = $http({
        method: "post",
        url: "update",
        data: {
          issue: issue,
        },
      });
      return( request.then( handleSuccess, handleError ) );
    }

    return {
      list: getData,
      getIssues: getIssues,
      addIssue: addIssue,
      deleteIssue: deleteIssue,
      editIssue: editIssue,
    }
    
    function handleError ( response ){
      if (
          ! angular.isObject( response.data ) ||
          ! response.data.message
        ) {
        return ( $q.reject("false") );
      };

      return ( $q.reject( response.data.message ) );
    }

    function  handleSuccess( response ){
      return ( response.data );
    }
  });

</script>